// Code generated by cmd/gen-types; DO NOT EDIT.
package {{ .packageName }}

import (
	"database/sql/driver"
	"errors"

	"github.com/google/uuid"
)

type Types interface {
	{{ range $index, $type := .types -}}
	{{if $index}} | {{end}}{{$type}}
	{{- end }}
}

func Parse[T Types](s string) (T, error) {
	u, err := uuid.Parse(s)
	return T(u), err
}

func MustParse[T Types](s string) T {
	return T(uuid.MustParse(s))
}

{{- range $type := .types }}
type {{$type}} uuid.UUID

var {{$type}}Nil = {{$type}}(uuid.Nil)

func New{{$type}}() {{$type}} {
	return {{$type}}(uuid.New())
}

func (r {{$type}}) String() string {
	return uuid.UUID(r).String()
}

func (r {{$type}}) Value() (driver.Value, error) {
	return r.String(), nil
}

func (r *{{$type}}) Scan(src any) error {
	return (*uuid.UUID)(r).Scan(src)
}

func (r {{$type}}) MarshalText() ([]byte, error) {
	return uuid.UUID(r).MarshalText()
}

func (r *{{$type}}) UnmarshalText(data []byte) error {
	return (*uuid.UUID)(r).UnmarshalText(data)
}

func (r {{$type}}) Validate() error {
	if r.IsZero() {
		return errors.New("zero {{$type}}")
	}
	return nil
}

func (r {{$type}}) Matches(x any) bool {
	v, ok := x.({{$type}})
	if !ok {
		return false
	}
	return r == v
}

func (r {{$type}}) IsZero() bool {
	return r == {{$type}}Nil
}
{{end}}