// Package managerevents provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package managerevents

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/lapitskyss/chat-service/internal/types"
	"github.com/oapi-codegen/runtime"
)

// ChatClosedEvent defines model for ChatClosedEvent.
type ChatClosedEvent struct {
	CanTakeMoreProblems bool            `json:"canTakeMoreProblems"`
	ChatId              types.ChatID    `json:"chatId"`
	EventId             types.EventID   `json:"eventId"`
	EventType           string          `json:"eventType"`
	RequestId           types.RequestID `json:"requestId"`
}

// Event defines model for Event.
type Event struct {
	union json.RawMessage
}

// ManagerTypingEvent defines model for ManagerTypingEvent.
type ManagerTypingEvent struct {
	ChatId    types.ChatID    `json:"chatId"`
	EventType string          `json:"eventType"`
	RequestId types.RequestID `json:"requestId"`
}

// NewChatEvent defines model for NewChatEvent.
type NewChatEvent struct {
	CanTakeMoreProblems bool            `json:"canTakeMoreProblems"`
	ChatId              types.ChatID    `json:"chatId"`
	ClientId            types.UserID    `json:"clientId"`
	EventId             types.EventID   `json:"eventId"`
	EventType           string          `json:"eventType"`
	RequestId           types.RequestID `json:"requestId"`
}

// NewMessageEvent defines model for NewMessageEvent.
type NewMessageEvent struct {
	AuthorId  types.UserID    `json:"authorId"`
	Body      string          `json:"body"`
	ChatId    types.ChatID    `json:"chatId"`
	CreatedAt time.Time       `json:"createdAt"`
	EventId   types.EventID   `json:"eventId"`
	EventType string          `json:"eventType"`
	MessageId types.MessageID `json:"messageId"`
	RequestId types.RequestID `json:"requestId"`
}

// ReadEvent defines model for ReadEvent.
type ReadEvent struct {
	union json.RawMessage
}

// TypingEvent defines model for TypingEvent.
type TypingEvent struct {
	ClientId  types.UserID    `json:"clientId"`
	EventId   types.EventID   `json:"eventId"`
	EventType string          `json:"eventType"`
	RequestId types.RequestID `json:"requestId"`
}

// AsNewChatEvent returns the union data inside the Event as a NewChatEvent
func (t Event) AsNewChatEvent() (NewChatEvent, error) {
	var body NewChatEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewChatEvent overwrites any union data inside the Event as the provided NewChatEvent
func (t *Event) FromNewChatEvent(v NewChatEvent) error {
	v.EventType = "NewChatEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewChatEvent performs a merge with any union data inside the Event, using the provided NewChatEvent
func (t *Event) MergeNewChatEvent(v NewChatEvent) error {
	v.EventType = "NewChatEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewMessageEvent returns the union data inside the Event as a NewMessageEvent
func (t Event) AsNewMessageEvent() (NewMessageEvent, error) {
	var body NewMessageEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewMessageEvent overwrites any union data inside the Event as the provided NewMessageEvent
func (t *Event) FromNewMessageEvent(v NewMessageEvent) error {
	v.EventType = "NewMessageEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewMessageEvent performs a merge with any union data inside the Event, using the provided NewMessageEvent
func (t *Event) MergeNewMessageEvent(v NewMessageEvent) error {
	v.EventType = "NewMessageEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsChatClosedEvent returns the union data inside the Event as a ChatClosedEvent
func (t Event) AsChatClosedEvent() (ChatClosedEvent, error) {
	var body ChatClosedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatClosedEvent overwrites any union data inside the Event as the provided ChatClosedEvent
func (t *Event) FromChatClosedEvent(v ChatClosedEvent) error {
	v.EventType = "ChatClosedEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatClosedEvent performs a merge with any union data inside the Event, using the provided ChatClosedEvent
func (t *Event) MergeChatClosedEvent(v ChatClosedEvent) error {
	v.EventType = "ChatClosedEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsTypingEvent returns the union data inside the Event as a TypingEvent
func (t Event) AsTypingEvent() (TypingEvent, error) {
	var body TypingEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTypingEvent overwrites any union data inside the Event as the provided TypingEvent
func (t *Event) FromTypingEvent(v TypingEvent) error {
	v.EventType = "TypingEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTypingEvent performs a merge with any union data inside the Event, using the provided TypingEvent
func (t *Event) MergeTypingEvent(v TypingEvent) error {
	v.EventType = "TypingEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Event) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"eventType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Event) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "ChatClosedEvent":
		return t.AsChatClosedEvent()
	case "NewChatEvent":
		return t.AsNewChatEvent()
	case "NewMessageEvent":
		return t.AsNewMessageEvent()
	case "TypingEvent":
		return t.AsTypingEvent()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Event) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Event) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsManagerTypingEvent returns the union data inside the ReadEvent as a ManagerTypingEvent
func (t ReadEvent) AsManagerTypingEvent() (ManagerTypingEvent, error) {
	var body ManagerTypingEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromManagerTypingEvent overwrites any union data inside the ReadEvent as the provided ManagerTypingEvent
func (t *ReadEvent) FromManagerTypingEvent(v ManagerTypingEvent) error {
	v.EventType = "ManagerTypingEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeManagerTypingEvent performs a merge with any union data inside the ReadEvent, using the provided ManagerTypingEvent
func (t *ReadEvent) MergeManagerTypingEvent(v ManagerTypingEvent) error {
	v.EventType = "ManagerTypingEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ReadEvent) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"eventType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ReadEvent) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "ManagerTypingEvent":
		return t.AsManagerTypingEvent()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ReadEvent) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ReadEvent) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWT2/aThD9Kmh+v+OCE/US7a1NesiBtErpKcphsQe8Zf91dw1FyN+92sUxGFxApEiE",
	"5gRav7HfjN/zmwWkWhqtUHkHdAEuzVGy+Pc2Z/5WaIfZ5ykqH46M1Qat5xgBKVMDNsG+tvjV6qFAGY/9",
	"3CBQGGotkCkoCaQ58/dZuDbSVjIPFIqCZ0BesM5brsZA4Fd3rLvVYfhxvcDi/m79UpdLo+2SD/M5UBhz",
	"nxfDXqplIpjh3k3mziXhqV2HdspTTLjyaBUTSbwrlCUBDF0dSyuO5IS8BvFhiw0mJQGLPwt0R/N+rMpP",
	"wLwixy1mQJ9a1VFLYTX99X7Xu3uuu9HDH5j60Hutw4y71HLJFfPahgPJjAktt8kW/ktWGk8qgSebMAIP",
	"OAuHO6samFjSR+fYGPdVNWAEBvNAd2fROqQkL9abPzAZhrIaWklAK/wyAvq0gP8tjg7iXpK94AblffjN",
	"ce7DN7p7Lgn0mWJjtI3BbH1wzvc7cgF+bTjzID82HXNh8ZAK/op8+O7QvsfW5cVWrYrjEmwrMDZNwwqf",
	"a3t+qhvqbN76Ys/UvBaZx+yjbxDLmMeu5xK32L1ZX8mlmo7lXYnxNMzfjOdr01U6X/d7LaQ/GX71BvaZ",
	"/xFZdtAK27YLta9RLci/siu23TdsabvXs/fE/CcT8zWRGG7G1UjHEXAvwrVPTE063woTqHZCRnQqOXbi",
	"ywh5PEXruFZAYXodVW1QMcOBwofede8KSOzPAVWFEARCK2hdlH2GwXjGL8vvcIpCG4nKd5YoIFBYARRm",
	"jiaJ0CkTuXae3lzdXCUzF3zwOwAA///y52PiNREAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
