// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source=handler.go -destination=mocks/handlers_mocks.gen.go -package=managerhandlermocks
//
// Package managerhandlermocks is a generated GoMock package.
package managerhandlermocks

import (
	context "context"
	reflect "reflect"

	managertypingmessage "github.com/lapitskyss/chat-service/internal/usecases/manager/typing-message"
	gomock "go.uber.org/mock/gomock"
)

// MockTypingMessageUseCase is a mock of TypingMessageUseCase interface.
type MockTypingMessageUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockTypingMessageUseCaseMockRecorder
}

// MockTypingMessageUseCaseMockRecorder is the mock recorder for MockTypingMessageUseCase.
type MockTypingMessageUseCaseMockRecorder struct {
	mock *MockTypingMessageUseCase
}

// NewMockTypingMessageUseCase creates a new mock instance.
func NewMockTypingMessageUseCase(ctrl *gomock.Controller) *MockTypingMessageUseCase {
	mock := &MockTypingMessageUseCase{ctrl: ctrl}
	mock.recorder = &MockTypingMessageUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTypingMessageUseCase) EXPECT() *MockTypingMessageUseCaseMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockTypingMessageUseCase) Handle(ctx context.Context, req managertypingmessage.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockTypingMessageUseCaseMockRecorder) Handle(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockTypingMessageUseCase)(nil).Handle), ctx, req)
}
