// Package clientevents provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package clientevents

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/lapitskyss/chat-service/internal/types"
	"github.com/oapi-codegen/runtime"
)

// ClientTypingEvent defines model for ClientTypingEvent.
type ClientTypingEvent struct {
	EventType string          `json:"eventType"`
	RequestId types.RequestID `json:"requestId"`
}

// Event defines model for Event.
type Event struct {
	union json.RawMessage
}

// EventCommon defines model for EventCommon.
type EventCommon struct {
	EventId   types.EventID   `json:"eventId"`
	EventType string          `json:"eventType"`
	MessageId types.MessageID `json:"messageId"`
	RequestId types.RequestID `json:"requestId"`
}

// MessageBlockedEvent defines model for MessageBlockedEvent.
type MessageBlockedEvent = EventCommon

// MessageSentEvent defines model for MessageSentEvent.
type MessageSentEvent = EventCommon

// NewMessageEvent defines model for NewMessageEvent.
type NewMessageEvent struct {
	AuthorId  *types.UserID   `json:"authorId,omitempty"`
	Body      string          `json:"body"`
	CreatedAt time.Time       `json:"createdAt"`
	EventId   types.EventID   `json:"eventId"`
	EventType string          `json:"eventType"`
	IsService bool            `json:"isService"`
	MessageId types.MessageID `json:"messageId"`
	RequestId types.RequestID `json:"requestId"`
}

// ReadEvent defines model for ReadEvent.
type ReadEvent struct {
	union json.RawMessage
}

// TypingEvent defines model for TypingEvent.
type TypingEvent struct {
	ClientId  types.UserID    `json:"clientId"`
	EventId   types.EventID   `json:"eventId"`
	EventType string          `json:"eventType"`
	RequestId types.RequestID `json:"requestId"`
}

// AsNewMessageEvent returns the union data inside the Event as a NewMessageEvent
func (t Event) AsNewMessageEvent() (NewMessageEvent, error) {
	var body NewMessageEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewMessageEvent overwrites any union data inside the Event as the provided NewMessageEvent
func (t *Event) FromNewMessageEvent(v NewMessageEvent) error {
	v.EventType = "NewMessageEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewMessageEvent performs a merge with any union data inside the Event, using the provided NewMessageEvent
func (t *Event) MergeNewMessageEvent(v NewMessageEvent) error {
	v.EventType = "NewMessageEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMessageSentEvent returns the union data inside the Event as a MessageSentEvent
func (t Event) AsMessageSentEvent() (MessageSentEvent, error) {
	var body MessageSentEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageSentEvent overwrites any union data inside the Event as the provided MessageSentEvent
func (t *Event) FromMessageSentEvent(v MessageSentEvent) error {
	v.EventType = "MessageSentEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageSentEvent performs a merge with any union data inside the Event, using the provided MessageSentEvent
func (t *Event) MergeMessageSentEvent(v MessageSentEvent) error {
	v.EventType = "MessageSentEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMessageBlockedEvent returns the union data inside the Event as a MessageBlockedEvent
func (t Event) AsMessageBlockedEvent() (MessageBlockedEvent, error) {
	var body MessageBlockedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageBlockedEvent overwrites any union data inside the Event as the provided MessageBlockedEvent
func (t *Event) FromMessageBlockedEvent(v MessageBlockedEvent) error {
	v.EventType = "MessageBlockedEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageBlockedEvent performs a merge with any union data inside the Event, using the provided MessageBlockedEvent
func (t *Event) MergeMessageBlockedEvent(v MessageBlockedEvent) error {
	v.EventType = "MessageBlockedEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsTypingEvent returns the union data inside the Event as a TypingEvent
func (t Event) AsTypingEvent() (TypingEvent, error) {
	var body TypingEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTypingEvent overwrites any union data inside the Event as the provided TypingEvent
func (t *Event) FromTypingEvent(v TypingEvent) error {
	v.EventType = "TypingEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTypingEvent performs a merge with any union data inside the Event, using the provided TypingEvent
func (t *Event) MergeTypingEvent(v TypingEvent) error {
	v.EventType = "TypingEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Event) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"eventType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Event) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "MessageBlockedEvent":
		return t.AsMessageBlockedEvent()
	case "MessageSentEvent":
		return t.AsMessageSentEvent()
	case "NewMessageEvent":
		return t.AsNewMessageEvent()
	case "TypingEvent":
		return t.AsTypingEvent()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Event) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Event) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsClientTypingEvent returns the union data inside the ReadEvent as a ClientTypingEvent
func (t ReadEvent) AsClientTypingEvent() (ClientTypingEvent, error) {
	var body ClientTypingEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromClientTypingEvent overwrites any union data inside the ReadEvent as the provided ClientTypingEvent
func (t *ReadEvent) FromClientTypingEvent(v ClientTypingEvent) error {
	v.EventType = "ClientTypingEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeClientTypingEvent performs a merge with any union data inside the ReadEvent, using the provided ClientTypingEvent
func (t *ReadEvent) MergeClientTypingEvent(v ClientTypingEvent) error {
	v.EventType = "ClientTypingEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ReadEvent) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"eventType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ReadEvent) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "ClientTypingEvent":
		return t.AsClientTypingEvent()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ReadEvent) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ReadEvent) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWT2/aThD9Kmh+v+OCE/US+dYkPeTQVEraU5TDYg94m/3X3bFThPzdq10bMNgBhIpU",
	"TjbrmfGbN2+eWUJmlDUaNXlIl+CzAhWPt3dSoKbvCyv0/EuFmsKhdcaiI4ExBKsmAsMPilfw5ISeQ83A",
	"4a8SPT3k4enMOMUJUihLkQPbiWbwezw34/YwXPzkqU2/7z4dC2WNa6BwKiCFuaCinE4yoxLJrSD/tvA+",
	"yQpOY4+uEhkmQhM6zWUSC0Ndt+CEwxzSl04bXdCva5Bm+hMzCi2teciFz5xQQnMyLhwobgNR4fYres/n",
	"eCtN9oZ5mwL/JRumk5bmZCiUrQo8o6ZjsjdxDB7xvT3dm7kbxmBrzsNJ3ZCaraSweOQqkLQhsWZgNH6b",
	"QfqyhP8dzo5FUbP98b1+j0zYovdQzlaXr6uZ3xmljP5gA05VeKx8Dn2zA5upGl5Oxd3Seh7kl+UaDwFV",
	"1z821B7ykkGbWAKX8ojV6YoyqrTvGSeX6nnISZXY7qrwkgrjTp3rD4/uPIKbmnwxuCWZQ06Yf6YtxDkn",
	"HJNQ2INdMxD+uXlRp+DUGIlcw65+4nu7b+mm9wUTJvOEPD/qEzTw7R4eWT/wrzj7QNmAf++fiSzm/Hv6",
	"uEyLvxgbXY+dfeCo+1w0FBN6ZiIFgmR4dsv12+i5tAHq6K7gNGrUOIqz8MCgQudF+JpDdR01bVFzKyCF",
	"T5PryRWw2J6HVJdSMgidoPNR9DmGpbPUpN9jhdJYFao3UcCgdBJSePdpkkiTcVkYT+nN1c1V8u7DGvwJ",
	"AAD//5lrFvZzCwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
