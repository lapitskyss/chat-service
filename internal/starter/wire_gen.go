// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package starter

import (
	"github.com/lapitskyss/chat-service/internal/store"
)

// Injectors from wire.go:

func Initialize() (*Service, func(), error) {
	context, cleanup := provideContext()
	config, err := provideConfig()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	logger, cleanup2, err := provideLogger(config)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	client, cleanup3, err := providePSQLClient(context, config, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	database := store.NewDatabase(client)
	repo, err := provideChatRepo(database)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	messagesrepoRepo, err := provideMsgRepo(database)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	problemsrepoRepo, err := provideProblemRepo(database)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	eventStream, cleanup4 := provideInMemoryEventStream(logger)
	jobsrepoRepo, err := provideJobsRepo(database)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	service, err := provideMsgProducer(config)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	managerloadService, err := provideManagerLoad(config, problemsrepoRepo)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	outboxService, err := provideOutbox(config, repo, messagesrepoRepo, jobsrepoRepo, database, service, eventStream, managerloadService)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	keycloakclientClient, err := provideKeycloakClient(config)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	clientV1Swagger, err := provideClientV1Swagger()
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	serverClient, err := provideServerClient(config, database, repo, messagesrepoRepo, problemsrepoRepo, eventStream, outboxService, keycloakclientClient, clientV1Swagger)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	pool := provideInMemoryManagerPool()
	managerV1Swagger, err := provideManagerV1Swagger()
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	serverManager, err := provideServerManager(config, database, repo, messagesrepoRepo, problemsrepoRepo, eventStream, managerloadService, pool, outboxService, keycloakclientClient, managerV1Swagger)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	clientEventsSwagger, err := provideClientEventsSwagger()
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	managerEventsSwagger, err := provideManagerEventsSwagger()
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	server, err := provideServerDebug(config, clientV1Swagger, managerV1Swagger, clientEventsSwagger, managerEventsSwagger)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	managerschedulerService, err := provideManagerScheduler(config, pool, messagesrepoRepo, outboxService, problemsrepoRepo, database)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	afcverdictsprocessorService, err := provideAFCVerdictsProcessor(config, database, messagesrepoRepo, outboxService)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	starterService := NewService(context, serverClient, serverManager, server, outboxService, managerschedulerService, afcverdictsprocessorService)
	return starterService, func() {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
