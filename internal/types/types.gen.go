// Code generated by cmd/gen-types; DO NOT EDIT.
package types

import (
	"database/sql/driver"
	"errors"

	"github.com/google/uuid"
)

type Types interface {
	ChatID | ProblemID | MessageID | UserID | RequestID | JobID | FailedJobID
}

func Parse[T Types](s string) (T, error) {
	u, err := uuid.Parse(s)
	return T(u), err
}

func MustParse[T Types](s string) T {
	return T(uuid.MustParse(s))
}

type ChatID uuid.UUID

var ChatIDNil = ChatID(uuid.Nil)

func NewChatID() ChatID {
	return ChatID(uuid.New())
}

func (r ChatID) String() string {
	return uuid.UUID(r).String()
}

func (r ChatID) Value() (driver.Value, error) {
	return r.String(), nil
}

func (r *ChatID) Scan(src any) error {
	return (*uuid.UUID)(r).Scan(src)
}

func (r ChatID) MarshalText() ([]byte, error) {
	return uuid.UUID(r).MarshalText()
}

func (r *ChatID) UnmarshalText(data []byte) error {
	return (*uuid.UUID)(r).UnmarshalText(data)
}

func (r ChatID) Validate() error {
	if r.IsZero() {
		return errors.New("zero ChatID")
	}
	return nil
}

func (r ChatID) Matches(x any) bool {
	v, ok := x.(ChatID)
	if !ok {
		return false
	}
	return r == v
}

func (r ChatID) IsZero() bool {
	return r == ChatIDNil
}

type ProblemID uuid.UUID

var ProblemIDNil = ProblemID(uuid.Nil)

func NewProblemID() ProblemID {
	return ProblemID(uuid.New())
}

func (r ProblemID) String() string {
	return uuid.UUID(r).String()
}

func (r ProblemID) Value() (driver.Value, error) {
	return r.String(), nil
}

func (r *ProblemID) Scan(src any) error {
	return (*uuid.UUID)(r).Scan(src)
}

func (r ProblemID) MarshalText() ([]byte, error) {
	return uuid.UUID(r).MarshalText()
}

func (r *ProblemID) UnmarshalText(data []byte) error {
	return (*uuid.UUID)(r).UnmarshalText(data)
}

func (r ProblemID) Validate() error {
	if r.IsZero() {
		return errors.New("zero ProblemID")
	}
	return nil
}

func (r ProblemID) Matches(x any) bool {
	v, ok := x.(ProblemID)
	if !ok {
		return false
	}
	return r == v
}

func (r ProblemID) IsZero() bool {
	return r == ProblemIDNil
}

type MessageID uuid.UUID

var MessageIDNil = MessageID(uuid.Nil)

func NewMessageID() MessageID {
	return MessageID(uuid.New())
}

func (r MessageID) String() string {
	return uuid.UUID(r).String()
}

func (r MessageID) Value() (driver.Value, error) {
	return r.String(), nil
}

func (r *MessageID) Scan(src any) error {
	return (*uuid.UUID)(r).Scan(src)
}

func (r MessageID) MarshalText() ([]byte, error) {
	return uuid.UUID(r).MarshalText()
}

func (r *MessageID) UnmarshalText(data []byte) error {
	return (*uuid.UUID)(r).UnmarshalText(data)
}

func (r MessageID) Validate() error {
	if r.IsZero() {
		return errors.New("zero MessageID")
	}
	return nil
}

func (r MessageID) Matches(x any) bool {
	v, ok := x.(MessageID)
	if !ok {
		return false
	}
	return r == v
}

func (r MessageID) IsZero() bool {
	return r == MessageIDNil
}

type UserID uuid.UUID

var UserIDNil = UserID(uuid.Nil)

func NewUserID() UserID {
	return UserID(uuid.New())
}

func (r UserID) String() string {
	return uuid.UUID(r).String()
}

func (r UserID) Value() (driver.Value, error) {
	return r.String(), nil
}

func (r *UserID) Scan(src any) error {
	return (*uuid.UUID)(r).Scan(src)
}

func (r UserID) MarshalText() ([]byte, error) {
	return uuid.UUID(r).MarshalText()
}

func (r *UserID) UnmarshalText(data []byte) error {
	return (*uuid.UUID)(r).UnmarshalText(data)
}

func (r UserID) Validate() error {
	if r.IsZero() {
		return errors.New("zero UserID")
	}
	return nil
}

func (r UserID) Matches(x any) bool {
	v, ok := x.(UserID)
	if !ok {
		return false
	}
	return r == v
}

func (r UserID) IsZero() bool {
	return r == UserIDNil
}

type RequestID uuid.UUID

var RequestIDNil = RequestID(uuid.Nil)

func NewRequestID() RequestID {
	return RequestID(uuid.New())
}

func (r RequestID) String() string {
	return uuid.UUID(r).String()
}

func (r RequestID) Value() (driver.Value, error) {
	return r.String(), nil
}

func (r *RequestID) Scan(src any) error {
	return (*uuid.UUID)(r).Scan(src)
}

func (r RequestID) MarshalText() ([]byte, error) {
	return uuid.UUID(r).MarshalText()
}

func (r *RequestID) UnmarshalText(data []byte) error {
	return (*uuid.UUID)(r).UnmarshalText(data)
}

func (r RequestID) Validate() error {
	if r.IsZero() {
		return errors.New("zero RequestID")
	}
	return nil
}

func (r RequestID) Matches(x any) bool {
	v, ok := x.(RequestID)
	if !ok {
		return false
	}
	return r == v
}

func (r RequestID) IsZero() bool {
	return r == RequestIDNil
}

type JobID uuid.UUID

var JobIDNil = JobID(uuid.Nil)

func NewJobID() JobID {
	return JobID(uuid.New())
}

func (r JobID) String() string {
	return uuid.UUID(r).String()
}

func (r JobID) Value() (driver.Value, error) {
	return r.String(), nil
}

func (r *JobID) Scan(src any) error {
	return (*uuid.UUID)(r).Scan(src)
}

func (r JobID) MarshalText() ([]byte, error) {
	return uuid.UUID(r).MarshalText()
}

func (r *JobID) UnmarshalText(data []byte) error {
	return (*uuid.UUID)(r).UnmarshalText(data)
}

func (r JobID) Validate() error {
	if r.IsZero() {
		return errors.New("zero JobID")
	}
	return nil
}

func (r JobID) Matches(x any) bool {
	v, ok := x.(JobID)
	if !ok {
		return false
	}
	return r == v
}

func (r JobID) IsZero() bool {
	return r == JobIDNil
}

type FailedJobID uuid.UUID

var FailedJobIDNil = FailedJobID(uuid.Nil)

func NewFailedJobID() FailedJobID {
	return FailedJobID(uuid.New())
}

func (r FailedJobID) String() string {
	return uuid.UUID(r).String()
}

func (r FailedJobID) Value() (driver.Value, error) {
	return r.String(), nil
}

func (r *FailedJobID) Scan(src any) error {
	return (*uuid.UUID)(r).Scan(src)
}

func (r FailedJobID) MarshalText() ([]byte, error) {
	return uuid.UUID(r).MarshalText()
}

func (r *FailedJobID) UnmarshalText(data []byte) error {
	return (*uuid.UUID)(r).UnmarshalText(data)
}

func (r FailedJobID) Validate() error {
	if r.IsZero() {
		return errors.New("zero FailedJobID")
	}
	return nil
}

func (r FailedJobID) Matches(x any) bool {
	v, ok := x.(FailedJobID)
	if !ok {
		return false
	}
	return r == v
}

func (r FailedJobID) IsZero() bool {
	return r == FailedJobIDNil
}
