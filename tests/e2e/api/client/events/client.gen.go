// Package apiclientevents provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package apiclientevents

import (
	"encoding/json"
	"errors"
	"time"

	"github.com/lapitskyss/chat-service/internal/types"
	"github.com/oapi-codegen/runtime"
)

// ClientTypingEvent defines model for ClientTypingEvent.
type ClientTypingEvent struct {
	EventType string          `json:"eventType"`
	RequestId types.RequestID `json:"requestId"`
}

// Event defines model for Event.
type Event struct {
	union json.RawMessage
}

// EventCommon defines model for EventCommon.
type EventCommon struct {
	EventId   types.EventID   `json:"eventId"`
	EventType string          `json:"eventType"`
	MessageId types.MessageID `json:"messageId"`
	RequestId types.RequestID `json:"requestId"`
}

// MessageBlockedEvent defines model for MessageBlockedEvent.
type MessageBlockedEvent = EventCommon

// MessageSentEvent defines model for MessageSentEvent.
type MessageSentEvent = EventCommon

// NewMessageEvent defines model for NewMessageEvent.
type NewMessageEvent struct {
	AuthorId  *types.UserID   `json:"authorId,omitempty"`
	Body      string          `json:"body"`
	CreatedAt time.Time       `json:"createdAt"`
	EventId   types.EventID   `json:"eventId"`
	EventType string          `json:"eventType"`
	IsService bool            `json:"isService"`
	MessageId types.MessageID `json:"messageId"`
	RequestId types.RequestID `json:"requestId"`
}

// ReadEvent defines model for ReadEvent.
type ReadEvent struct {
	union json.RawMessage
}

// TypingEvent defines model for TypingEvent.
type TypingEvent struct {
	ClientId  types.UserID    `json:"clientId"`
	EventId   types.EventID   `json:"eventId"`
	EventType string          `json:"eventType"`
	RequestId types.RequestID `json:"requestId"`
}

// AsNewMessageEvent returns the union data inside the Event as a NewMessageEvent
func (t Event) AsNewMessageEvent() (NewMessageEvent, error) {
	var body NewMessageEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewMessageEvent overwrites any union data inside the Event as the provided NewMessageEvent
func (t *Event) FromNewMessageEvent(v NewMessageEvent) error {
	v.EventType = "NewMessageEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewMessageEvent performs a merge with any union data inside the Event, using the provided NewMessageEvent
func (t *Event) MergeNewMessageEvent(v NewMessageEvent) error {
	v.EventType = "NewMessageEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMessageSentEvent returns the union data inside the Event as a MessageSentEvent
func (t Event) AsMessageSentEvent() (MessageSentEvent, error) {
	var body MessageSentEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageSentEvent overwrites any union data inside the Event as the provided MessageSentEvent
func (t *Event) FromMessageSentEvent(v MessageSentEvent) error {
	v.EventType = "MessageSentEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageSentEvent performs a merge with any union data inside the Event, using the provided MessageSentEvent
func (t *Event) MergeMessageSentEvent(v MessageSentEvent) error {
	v.EventType = "MessageSentEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMessageBlockedEvent returns the union data inside the Event as a MessageBlockedEvent
func (t Event) AsMessageBlockedEvent() (MessageBlockedEvent, error) {
	var body MessageBlockedEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageBlockedEvent overwrites any union data inside the Event as the provided MessageBlockedEvent
func (t *Event) FromMessageBlockedEvent(v MessageBlockedEvent) error {
	v.EventType = "MessageBlockedEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageBlockedEvent performs a merge with any union data inside the Event, using the provided MessageBlockedEvent
func (t *Event) MergeMessageBlockedEvent(v MessageBlockedEvent) error {
	v.EventType = "MessageBlockedEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsTypingEvent returns the union data inside the Event as a TypingEvent
func (t Event) AsTypingEvent() (TypingEvent, error) {
	var body TypingEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTypingEvent overwrites any union data inside the Event as the provided TypingEvent
func (t *Event) FromTypingEvent(v TypingEvent) error {
	v.EventType = "TypingEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTypingEvent performs a merge with any union data inside the Event, using the provided TypingEvent
func (t *Event) MergeTypingEvent(v TypingEvent) error {
	v.EventType = "TypingEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Event) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"eventType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Event) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "MessageBlockedEvent":
		return t.AsMessageBlockedEvent()
	case "MessageSentEvent":
		return t.AsMessageSentEvent()
	case "NewMessageEvent":
		return t.AsNewMessageEvent()
	case "TypingEvent":
		return t.AsTypingEvent()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Event) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Event) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsClientTypingEvent returns the union data inside the ReadEvent as a ClientTypingEvent
func (t ReadEvent) AsClientTypingEvent() (ClientTypingEvent, error) {
	var body ClientTypingEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromClientTypingEvent overwrites any union data inside the ReadEvent as the provided ClientTypingEvent
func (t *ReadEvent) FromClientTypingEvent(v ClientTypingEvent) error {
	v.EventType = "ClientTypingEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeClientTypingEvent performs a merge with any union data inside the ReadEvent, using the provided ClientTypingEvent
func (t *ReadEvent) MergeClientTypingEvent(v ClientTypingEvent) error {
	v.EventType = "ClientTypingEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ReadEvent) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"eventType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ReadEvent) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "ClientTypingEvent":
		return t.AsClientTypingEvent()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ReadEvent) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ReadEvent) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
